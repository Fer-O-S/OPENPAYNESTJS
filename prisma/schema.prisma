// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Este es tu Prisma schema actualizado para usar Openpay

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  openpayCustomerId String? @unique // ID del cliente en Openpay

  // Back-relations
  orders   Orders[]
  payments Payments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Form {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  currency        String
  stock           Int?     @default(0) // Cantidad en inventario
  active          Boolean  @default(true)
  imageUrl        String?
  mode            String   @default("default") // Modo del producto
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relación con órdenes
  orders          Orders[]
}

model Orders {
  id Int @id @default(autoincrement())

  // Relación con usuario
  userId Int
  user   Users @relation(fields: [userId], references: [id])

  // Relación con producto
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  quantity    Int         @default(1)
  totalAmount Decimal     @db.Decimal(10, 2)
  currency    String      @default("mxn")
  status      OrderStatus @default(PENDING)

  // Openpay IDs
  openpayTransactionId String? @unique
  paymentMethod        String?
  paidAt               DateTime?

  // Relación con pagos
  payments Payments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payments {
  id Int @id @default(autoincrement())

  orderId Int
  order   Orders @relation(fields: [orderId], references: [id])

  userId Int
  user   Users @relation(fields: [userId], references: [id])

  // Openpay info
  openpayChargeId String?       @unique
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("mxn")
  status          PaymentStatus @default(PENDING)
  receiptUrl      String? // URL del recibo de Openpay

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums básicos
enum OrderStatus {
  PENDING
  PAID
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}